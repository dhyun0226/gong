{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { db } from \"./db\";\nimport { v4 as uuidv4 } from 'uuid';\nexport var BookRepository = function () {\n  function BookRepository() {\n    _classCallCheck(this, BookRepository);\n  }\n  return _createClass(BookRepository, null, [{\n    key: \"getAll\",\n    value: function getAll() {\n      return new Promise(function (resolve, reject) {\n        db.transaction(function (tx) {\n          tx.executeSql('SELECT * FROM books ORDER BY title COLLATE NOCASE;', [], function (_, _ref) {\n            var rows = _ref.rows;\n            return resolve(rows._array);\n          }, function (_, error) {\n            reject(error);\n            return false;\n          });\n        });\n      });\n    }\n  }, {\n    key: \"getById\",\n    value: function getById(id) {\n      return new Promise(function (resolve, reject) {\n        db.transaction(function (tx) {\n          tx.executeSql('SELECT * FROM books WHERE id = ?;', [id], function (_, _ref2) {\n            var rows = _ref2.rows;\n            return resolve(rows.length > 0 ? rows.item(0) : null);\n          }, function (_, error) {\n            reject(error);\n            return false;\n          });\n        });\n      });\n    }\n  }, {\n    key: \"create\",\n    value: function create(book) {\n      var id = uuidv4();\n      return new Promise(function (resolve, reject) {\n        db.transaction(function (tx) {\n          tx.executeSql('INSERT INTO books (id, title, author, rating, startedDate) VALUES (?, ?, ?, ?, ?);', [id, book.title, book.author, book.rating, book.startedDate], function () {\n            return resolve(id);\n          }, function (_, error) {\n            reject(error);\n            return false;\n          });\n        });\n      });\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(id) {\n      return new Promise(function (resolve, reject) {\n        db.transaction(function (tx) {\n          tx.executeSql('DELETE FROM books WHERE id = ?;', [id], function () {\n            return resolve();\n          }, function (_, error) {\n            reject(error);\n            return false;\n          });\n        });\n      });\n    }\n  }]);\n}();\nexport var EntryRepository = function () {\n  function EntryRepository() {\n    _classCallCheck(this, EntryRepository);\n  }\n  return _createClass(EntryRepository, null, [{\n    key: \"getByBookId\",\n    value: function getByBookId(bookId) {\n      return new Promise(function (resolve, reject) {\n        db.transaction(function (tx) {\n          tx.executeSql(`SELECT * FROM entries \n           WHERE book_id = ? \n           ORDER BY page_start ASC, page_end ASC, created_at ASC;`, [bookId], function (_, _ref3) {\n            var rows = _ref3.rows;\n            return resolve(rows._array);\n          }, function (_, error) {\n            reject(error);\n            return false;\n          });\n        });\n      });\n    }\n  }, {\n    key: \"create\",\n    value: function create(entry) {\n      var id = uuidv4();\n      var created_at = Date.now();\n      return new Promise(function (resolve, reject) {\n        db.transaction(function (tx) {\n          tx.executeSql('INSERT INTO entries (id, book_id, page_start, page_end, text, created_at) VALUES (?, ?, ?, ?, ?, ?);', [id, entry.book_id, entry.page_start, entry.page_end, entry.text, created_at], function () {\n            return resolve(id);\n          }, function (_, error) {\n            reject(error);\n            return false;\n          });\n        });\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(id, updates) {\n      return new Promise(function (resolve, reject) {\n        db.transaction(function (tx) {\n          var fields = [];\n          var values = [];\n          if (updates.page_start !== undefined) {\n            fields.push('page_start = ?');\n            values.push(updates.page_start);\n          }\n          if (updates.page_end !== undefined) {\n            fields.push('page_end = ?');\n            values.push(updates.page_end);\n          }\n          if (updates.text !== undefined) {\n            fields.push('text = ?');\n            values.push(updates.text);\n          }\n          if (fields.length === 0) {\n            resolve();\n            return;\n          }\n          values.push(id);\n          var sql = `UPDATE entries SET ${fields.join(', ')} WHERE id = ?;`;\n          tx.executeSql(sql, values, function () {\n            return resolve();\n          }, function (_, error) {\n            reject(error);\n            return false;\n          });\n        });\n      });\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(id) {\n      return new Promise(function (resolve, reject) {\n        db.transaction(function (tx) {\n          tx.executeSql('DELETE FROM entries WHERE id = ?;', [id], function () {\n            return resolve();\n          }, function (_, error) {\n            reject(error);\n            return false;\n          });\n        });\n      });\n    }\n  }]);\n}();\nexport var SettingsRepository = function () {\n  function SettingsRepository() {\n    _classCallCheck(this, SettingsRepository);\n  }\n  return _createClass(SettingsRepository, null, [{\n    key: \"getAll\",\n    value: function getAll() {\n      return new Promise(function (resolve, reject) {\n        db.transaction(function (tx) {\n          tx.executeSql('SELECT * FROM settings;', [], function (_, _ref4) {\n            var rows = _ref4.rows;\n            var settings = {};\n            for (var i = 0; i < rows.length; i++) {\n              var item = rows.item(i);\n              var key = item.key;\n              var value = item.value;\n              if (value === 'true') value = true;else if (value === 'false') value = false;\n              settings[key] = value;\n            }\n            resolve(settings);\n          }, function (_, error) {\n            reject(error);\n            return false;\n          });\n        });\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(key, value) {\n      return new Promise(function (resolve, reject) {\n        db.transaction(function (tx) {\n          var stringValue = typeof value === 'boolean' ? value.toString() : value;\n          tx.executeSql('UPDATE settings SET value = ? WHERE key = ?;', [stringValue, key], function () {\n            return resolve();\n          }, function (_, error) {\n            reject(error);\n            return false;\n          });\n        });\n      });\n    }\n  }]);\n}();","map":{"version":3,"names":["db","v4","uuidv4","BookRepository","_classCallCheck","_createClass","key","value","getAll","Promise","resolve","reject","transaction","tx","executeSql","_","_ref","rows","_array","error","getById","id","_ref2","length","item","create","book","title","author","rating","startedDate","delete","EntryRepository","getByBookId","bookId","_ref3","entry","created_at","Date","now","book_id","page_start","page_end","text","update","updates","fields","values","undefined","push","sql","join","SettingsRepository","_ref4","settings","i","stringValue","toString"],"sources":["C:/workspace/gong/app/data/repositories.ts"],"sourcesContent":["import { db } from './db';\r\nimport { Book, Entry, Settings } from './types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport class BookRepository {\r\n  static getAll(): Promise<Book[]> {\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction((tx) => {\r\n        tx.executeSql(\r\n          'SELECT * FROM books ORDER BY title COLLATE NOCASE;',\r\n          [],\r\n          (_, { rows }) => resolve(rows._array),\r\n          (_, error) => {\r\n            reject(error);\r\n            return false;\r\n          }\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  static getById(id: string): Promise<Book | null> {\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction((tx) => {\r\n        tx.executeSql(\r\n          'SELECT * FROM books WHERE id = ?;',\r\n          [id],\r\n          (_, { rows }) => resolve(rows.length > 0 ? rows.item(0) : null),\r\n          (_, error) => {\r\n            reject(error);\r\n            return false;\r\n          }\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  static create(book: Omit<Book, 'id'>): Promise<string> {\r\n    const id = uuidv4();\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction((tx) => {\r\n        tx.executeSql(\r\n          'INSERT INTO books (id, title, author, rating, startedDate) VALUES (?, ?, ?, ?, ?);',\r\n          [id, book.title, book.author, book.rating, book.startedDate],\r\n          () => resolve(id),\r\n          (_, error) => {\r\n            reject(error);\r\n            return false;\r\n          }\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  static delete(id: string): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction((tx) => {\r\n        tx.executeSql(\r\n          'DELETE FROM books WHERE id = ?;',\r\n          [id],\r\n          () => resolve(),\r\n          (_, error) => {\r\n            reject(error);\r\n            return false;\r\n          }\r\n        );\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport class EntryRepository {\r\n  static getByBookId(bookId: string): Promise<Entry[]> {\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction((tx) => {\r\n        tx.executeSql(\r\n          `SELECT * FROM entries \r\n           WHERE book_id = ? \r\n           ORDER BY page_start ASC, page_end ASC, created_at ASC;`,\r\n          [bookId],\r\n          (_, { rows }) => resolve(rows._array),\r\n          (_, error) => {\r\n            reject(error);\r\n            return false;\r\n          }\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  static create(entry: Omit<Entry, 'id' | 'created_at'>): Promise<string> {\r\n    const id = uuidv4();\r\n    const created_at = Date.now();\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction((tx) => {\r\n        tx.executeSql(\r\n          'INSERT INTO entries (id, book_id, page_start, page_end, text, created_at) VALUES (?, ?, ?, ?, ?, ?);',\r\n          [id, entry.book_id, entry.page_start, entry.page_end, entry.text, created_at],\r\n          () => resolve(id),\r\n          (_, error) => {\r\n            reject(error);\r\n            return false;\r\n          }\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  static update(id: string, updates: Partial<Entry>): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction((tx) => {\r\n        const fields = [];\r\n        const values = [];\r\n        \r\n        if (updates.page_start !== undefined) {\r\n          fields.push('page_start = ?');\r\n          values.push(updates.page_start);\r\n        }\r\n        if (updates.page_end !== undefined) {\r\n          fields.push('page_end = ?');\r\n          values.push(updates.page_end);\r\n        }\r\n        if (updates.text !== undefined) {\r\n          fields.push('text = ?');\r\n          values.push(updates.text);\r\n        }\r\n        \r\n        if (fields.length === 0) {\r\n          resolve();\r\n          return;\r\n        }\r\n        \r\n        values.push(id);\r\n        const sql = `UPDATE entries SET ${fields.join(', ')} WHERE id = ?;`;\r\n        \r\n        tx.executeSql(\r\n          sql,\r\n          values,\r\n          () => resolve(),\r\n          (_, error) => {\r\n            reject(error);\r\n            return false;\r\n          }\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  static delete(id: string): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction((tx) => {\r\n        tx.executeSql(\r\n          'DELETE FROM entries WHERE id = ?;',\r\n          [id],\r\n          () => resolve(),\r\n          (_, error) => {\r\n            reject(error);\r\n            return false;\r\n          }\r\n        );\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport class SettingsRepository {\r\n  static getAll(): Promise<Settings> {\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction((tx) => {\r\n        tx.executeSql(\r\n          'SELECT * FROM settings;',\r\n          [],\r\n          (_, { rows }) => {\r\n            const settings: any = {};\r\n            for (let i = 0; i < rows.length; i++) {\r\n              const item = rows.item(i);\r\n              const key = item.key;\r\n              let value: any = item.value;\r\n              \r\n              if (value === 'true') value = true;\r\n              else if (value === 'false') value = false;\r\n              \r\n              settings[key] = value;\r\n            }\r\n            resolve(settings as Settings);\r\n          },\r\n          (_, error) => {\r\n            reject(error);\r\n            return false;\r\n          }\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  static update(key: keyof Settings, value: any): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction((tx) => {\r\n        const stringValue = typeof value === 'boolean' ? value.toString() : value;\r\n        tx.executeSql(\r\n          'UPDATE settings SET value = ? WHERE key = ?;',\r\n          [stringValue, key],\r\n          () => resolve(),\r\n          (_, error) => {\r\n            reject(error);\r\n            return false;\r\n          }\r\n        );\r\n      });\r\n    });\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}