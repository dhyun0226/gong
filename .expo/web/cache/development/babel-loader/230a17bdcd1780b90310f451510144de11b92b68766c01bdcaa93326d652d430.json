{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as SQLite from 'expo-sqlite';\nvar DB_NAME = 'gong.db';\nexport var db = SQLite.openDatabase(DB_NAME);\nexport var initDatabase = function initDatabase() {\n  return new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql(`CREATE TABLE IF NOT EXISTS books (\n            id TEXT PRIMARY KEY,\n            title TEXT NOT NULL,\n            author TEXT NOT NULL,\n            rating REAL NOT NULL CHECK (rating >= 0.0 AND rating <= 5.0),\n            startedDate TEXT NOT NULL\n          );`);\n      tx.executeSql(`CREATE TABLE IF NOT EXISTS entries (\n            id TEXT PRIMARY KEY,\n            book_id TEXT NOT NULL,\n            page_start INTEGER NOT NULL,\n            page_end INTEGER NOT NULL,\n            text TEXT NOT NULL,\n            created_at INTEGER NOT NULL,\n            FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE\n          );`);\n      tx.executeSql(`CREATE INDEX IF NOT EXISTS idx_entries_book \n           ON entries(book_id, page_start, page_end, created_at);`);\n      tx.executeSql(`CREATE TABLE IF NOT EXISTS settings (\n            key TEXT PRIMARY KEY,\n            value TEXT NOT NULL\n          );`);\n      var defaultSettings = {\n        viewMode: 'page',\n        fontSize: 'medium',\n        lineHeight: 'normal',\n        margin: 'normal',\n        font: 'sans',\n        einkMode: 'false',\n        haptic: 'false',\n        sound: 'false',\n        scrollAccel: 'normal'\n      };\n      Object.entries(defaultSettings).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n        tx.executeSql(`INSERT OR IGNORE INTO settings (key, value) VALUES (?, ?);`, [key, value]);\n      });\n      tx.executeSql(`INSERT OR IGNORE INTO books (id, title, author, rating, startedDate) \n           VALUES \n           ('demo-1', '데미안', '헤르만 헤세', 4.5, '2024-01-01'),\n           ('demo-2', '어린 왕자', '생텍쥐페리', 4.8, '2024-01-15'),\n           ('demo-3', '1984', '조지 오웰', 4.3, '2024-02-01');`);\n      tx.executeSql(`INSERT OR IGNORE INTO entries (id, book_id, page_start, page_end, text, created_at)\n           VALUES \n           ('entry-1', 'demo-1', 16, 16, '새는 알에서 나오려고 투쟁한다. 알은 세계이다.', 1704067200000),\n           ('entry-2', 'demo-1', 19, 20, '그대가 누군가를 사랑한다면 그에게 아무런 흔적도 남기지 말아야 한다.', 1704067300000),\n           ('entry-3', 'demo-1', 16, 16, '두 번째 메모: 같은 페이지에 대한 추가 생각', 1704067400000),\n           ('entry-4', 'demo-2', 1, 1, '어른들은 정말 이상해', 1705267200000),\n           ('entry-5', 'demo-2', 27, 27, '가장 중요한 것은 눈에 보이지 않아', 1705267300000);`);\n    }, reject, function () {\n      return resolve();\n    });\n  });\n};","map":{"version":3,"names":["SQLite","DB_NAME","db","openDatabase","initDatabase","Promise","resolve","reject","transaction","tx","executeSql","defaultSettings","viewMode","fontSize","lineHeight","margin","font","einkMode","haptic","sound","scrollAccel","Object","entries","forEach","_ref","_ref2","_slicedToArray","key","value"],"sources":["C:/workspace/gong/app/data/db.ts"],"sourcesContent":["import * as SQLite from 'expo-sqlite';\r\n\r\nconst DB_NAME = 'gong.db';\r\n\r\nexport const db = SQLite.openDatabase(DB_NAME);\r\n\r\nexport const initDatabase = (): Promise<void> => {\r\n  return new Promise((resolve, reject) => {\r\n    db.transaction(\r\n      (tx) => {\r\n        tx.executeSql(\r\n          `CREATE TABLE IF NOT EXISTS books (\r\n            id TEXT PRIMARY KEY,\r\n            title TEXT NOT NULL,\r\n            author TEXT NOT NULL,\r\n            rating REAL NOT NULL CHECK (rating >= 0.0 AND rating <= 5.0),\r\n            startedDate TEXT NOT NULL\r\n          );`\r\n        );\r\n\r\n        tx.executeSql(\r\n          `CREATE TABLE IF NOT EXISTS entries (\r\n            id TEXT PRIMARY KEY,\r\n            book_id TEXT NOT NULL,\r\n            page_start INTEGER NOT NULL,\r\n            page_end INTEGER NOT NULL,\r\n            text TEXT NOT NULL,\r\n            created_at INTEGER NOT NULL,\r\n            FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE\r\n          );`\r\n        );\r\n\r\n        tx.executeSql(\r\n          `CREATE INDEX IF NOT EXISTS idx_entries_book \r\n           ON entries(book_id, page_start, page_end, created_at);`\r\n        );\r\n\r\n        tx.executeSql(\r\n          `CREATE TABLE IF NOT EXISTS settings (\r\n            key TEXT PRIMARY KEY,\r\n            value TEXT NOT NULL\r\n          );`\r\n        );\r\n\r\n        const defaultSettings = {\r\n          viewMode: 'page',\r\n          fontSize: 'medium',\r\n          lineHeight: 'normal',\r\n          margin: 'normal',\r\n          font: 'sans',\r\n          einkMode: 'false',\r\n          haptic: 'false',\r\n          sound: 'false',\r\n          scrollAccel: 'normal'\r\n        };\r\n\r\n        Object.entries(defaultSettings).forEach(([key, value]) => {\r\n          tx.executeSql(\r\n            `INSERT OR IGNORE INTO settings (key, value) VALUES (?, ?);`,\r\n            [key, value]\r\n          );\r\n        });\r\n\r\n        // 초기 더미 데이터 (선택사항)\r\n        tx.executeSql(\r\n          `INSERT OR IGNORE INTO books (id, title, author, rating, startedDate) \r\n           VALUES \r\n           ('demo-1', '데미안', '헤르만 헤세', 4.5, '2024-01-01'),\r\n           ('demo-2', '어린 왕자', '생텍쥐페리', 4.8, '2024-01-15'),\r\n           ('demo-3', '1984', '조지 오웰', 4.3, '2024-02-01');`\r\n        );\r\n\r\n        tx.executeSql(\r\n          `INSERT OR IGNORE INTO entries (id, book_id, page_start, page_end, text, created_at)\r\n           VALUES \r\n           ('entry-1', 'demo-1', 16, 16, '새는 알에서 나오려고 투쟁한다. 알은 세계이다.', 1704067200000),\r\n           ('entry-2', 'demo-1', 19, 20, '그대가 누군가를 사랑한다면 그에게 아무런 흔적도 남기지 말아야 한다.', 1704067300000),\r\n           ('entry-3', 'demo-1', 16, 16, '두 번째 메모: 같은 페이지에 대한 추가 생각', 1704067400000),\r\n           ('entry-4', 'demo-2', 1, 1, '어른들은 정말 이상해', 1705267200000),\r\n           ('entry-5', 'demo-2', 27, 27, '가장 중요한 것은 눈에 보이지 않아', 1705267300000);`\r\n        );\r\n      },\r\n      reject,\r\n      () => resolve()\r\n    );\r\n  });\r\n};"],"mappings":";AAAA,OAAO,KAAKA,MAAM,MAAM,aAAa;AAErC,IAAMC,OAAO,GAAG,SAAS;AAEzB,OAAO,IAAMC,EAAE,GAAGF,MAAM,CAACG,YAAY,CAACF,OAAO,CAAC;AAE9C,OAAO,IAAMG,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAwB;EAC/C,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;IACtCL,EAAE,CAACM,WAAW,CACZ,UAACC,EAAE,EAAK;MACNA,EAAE,CAACC,UAAU,CACX;AACV;AACA;AACA;AACA;AACA;AACA,aACQ,CAAC;MAEDD,EAAE,CAACC,UAAU,CACX;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aACQ,CAAC;MAEDD,EAAE,CAACC,UAAU,CACX;AACV,kEACQ,CAAC;MAEDD,EAAE,CAACC,UAAU,CACX;AACV;AACA;AACA,aACQ,CAAC;MAED,IAAMC,eAAe,GAAG;QACtBC,QAAQ,EAAE,MAAM;QAChBC,QAAQ,EAAE,QAAQ;QAClBC,UAAU,EAAE,QAAQ;QACpBC,MAAM,EAAE,QAAQ;QAChBC,IAAI,EAAE,MAAM;QACZC,QAAQ,EAAE,OAAO;QACjBC,MAAM,EAAE,OAAO;QACfC,KAAK,EAAE,OAAO;QACdC,WAAW,EAAE;MACf,CAAC;MAEDC,MAAM,CAACC,OAAO,CAACX,eAAe,CAAC,CAACY,OAAO,CAAC,UAAAC,IAAA,EAAkB;QAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,IAAA;UAAhBG,GAAG,GAAAF,KAAA;UAAEG,KAAK,GAAAH,KAAA;QAClDhB,EAAE,CAACC,UAAU,CACX,4DAA4D,EAC5D,CAACiB,GAAG,EAAEC,KAAK,CACb,CAAC;MACH,CAAC,CAAC;MAGFnB,EAAE,CAACC,UAAU,CACX;AACV;AACA;AACA;AACA,2DACQ,CAAC;MAEDD,EAAE,CAACC,UAAU,CACX;AACV;AACA;AACA;AACA;AACA;AACA,gFACQ,CAAC;IACH,CAAC,EACDH,MAAM,EACN;MAAA,OAAMD,OAAO,CAAC,CAAC;IAAA,CACjB,CAAC;EACH,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}